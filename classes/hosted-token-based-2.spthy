

// Restrictions

// Considers only traces of the protocol in which signature verification matches
//restriction Equality:
 // "All x y #i . Eq(x, y) @ #i ==> x = y"


restriction OnlyOnceV:
  "All #i #j x . OnlyOnceV(x) @ #i & OnlyOnceV (x) @ #j ==> #i = #j"

restriction Inequality:
  "All x #i. Neq(x,x) @ #i ==> F"


// Hosted Token Based 2 (BlueSnap's model)
// merchant_id must be included in token generation

rule create_processor:
    []
    --[OnlyOnceV('unique_payment_processor')]->
    [!Processor($P)]

rule create_merchant:
    let
        merchant_type = 'legit_merchant'
    in
    [Fr(~api_username), Fr(~api_pass), !Processor(P)]
    --[Neq($M, P), OnlyOnceV(merchant_type), Create_merchant(~api_username)]->
    [!Merchant($M, ~api_username, ~api_pass, merchant_type)]

rule create_adversary_merchant:
    let
        merchant_type = 'adversary_merchant'
    in
    [Fr(~api_username), Fr(~api_pass),!Merchant(M, m_api_username, m_api_pass, 'legit_merchant'), !Processor(P)]
    --[Neq($AM, P), Neq($AM, M), OnlyOnceV(merchant_type), Create_adversary_merchant(~api_username)]->
    [!Merchant($AM, ~api_username, ~api_pass, merchant_type)]

rule create_client:
    [Fr(~card_number), !Merchant(M, m_api_username, m_api_pass, 'legit_merchant'), !Merchant(AM, am_api_username, am_api_pass, 'adversary_merchant'), !Processor(P)]
    --[Neq($C, P), Neq($C, M), Neq($C, AM), OnlyOnceV('legit_client'), Create_client(~card_number)]->
    [!Client($C, ~card_number)]


rule merchant_requests_token:
    [!Merchant(M, api_username, api_pass, merchant_type), !Processor(P)]
    -->
    [MP_SendMsg(M, P, <'merchant_credentials', api_username, api_pass>)]

rule payment_processor_returns_token:
    [MP_RecvMsg(M, P, <'merchant_credentials', recv_api_username, recv_api_pass>), !Merchant(M, recv_api_username, recv_api_pass, merchant_type), Fr(~token)]
    -->
    [MP_SendMsg(P, M, <'transaction_token', ~token>), TokenExists(~token, recv_api_username)]

rule merchant_forwards_token:
    [MP_RecvMsg(P, M, <'transaction_token', recv_token>), !Merchant(M, api_username, api_pass, merchant_type), !Client(C, card_number)]
    -->
    [CM_SendMsg(M, C, <'fwd_transaction_token', recv_token>), PendingTokens(api_pass, recv_token), Memory(M, <'transaction_token', recv_token>)]

rule client_sends_card_details:
    [CM_RecvMsg(M, C, <'fwd_transaction_token', recv_token>), !Client(C, card_number), !Processor(P)]
    --[Client_sends_card_details(card_number)]->
    [CP_SendMsg(C, P, <'client_card_details', recv_token, card_number>)]

rule payment_processor_binds_client:
    [CP_RecvMsg(C, P, <'client_card_details', recv_token, card_number>), TokenExists(recv_token, recv_api_username)]
    -->
    [TransactionExists(recv_token, card_number, recv_api_username)]

// I think this is implemented using a webhook or a redirect, once the client has submitted card information
rule client_notifies_merchant:
    [!Client(C, card_number), !Merchant(M, api_username, api_pass, merchant_type)]
    -->
    [CM_SendMsg(C, M, <'merchant_charge_notification'>)]

rule merchant_creates_transaction:
    [CM_RecvMsg(C, M, <'merchant_charge_notification'>), !Merchant(M, api_username, api_pass, merchant_type), Fr(~amount), Fr(~merchant_ref), PendingTokens(api_pass, recv_token), !Processor(P)]
    --[Merchant_creates_transaction(api_username, ~amount)]->
    [MP_SendMsg(M, P, <'merchant_transaction_data', api_username, api_pass, recv_token, ~amount, ~merchant_ref>)]


rule payment_processor_performs_transaction:
    let
        payment_processor_confirmation = 'payment_processor_confirmation'    
    in
    [MP_RecvMsg(M, P, <'merchant_transaction_data', recv_api_username, recv_api_pass, recv_token, recv_amount, recv_merchant_ref>), !Merchant(M, recv_api_username, recv_api_pass, merchant_type), !Client($C, recv_card_number), TransactionExists(recv_token, recv_card_number, recv_api_username)]
    --[Processor_handles_transaction(recv_card_number, recv_amount, recv_api_username)]->
    [!Transaction_approved(), MP_SendMsg(P, M, <'payment_processor_confirmation', payment_processor_confirmation>)]

rule merchant_receives_confirmation:
    let
        merchant_confirmation = 'merchant_confirmation'
    in
    [MP_RecvMsg(P, M, <'payment_processor_confirmation', recv_payment_processor_confirmation>), !Client(C, card_number)]
    -->
    [CM_SendMsg(M, C, <'merchant_confirmation', merchant_confirmation>), !Merchant_received_confirmation()]

rule client_receives_confirmation:
    [CM_RecvMsg(M, C, <'merchant_confirmation', merchant_confirmation>)]
    -->
    [!Client_received_confirmation()]





// Instrumentation

rule check_merchant_received_confirmation:
    [!Merchant_received_confirmation()]
    --[Check_merchant_received_confirmation()]->
    []

rule check_client_received_confirmation:
    [!Client_received_confirmation()]
    --[Check_client_received_confirmation()]->
    []

rule check_transaction_status:
    [!Transaction_approved()]
    --[Check_transaction_approved()]->
    []

rule check_client_knows_amount:
    [!Client_knows_amount(amount)]
    --[Check_client_knows_amount(amount)]->
    []








  
