

// Restrictions

// Considers only traces of the protocol in which signature verification matches
//restriction Equality:
 // "All x y #i . Eq(x, y) @ #i ==> x = y"


restriction OnlyOnceV:
  "All #i #j x . OnlyOnceV(x) @ #i & OnlyOnceV (x) @ #j ==> #i = #j"

restriction Inequality:
  "All x #i. Neq(x,x) @ #i ==> F"



// Hosted Token Based (Stripe's model)

rule create_processor:
    []
    --[OnlyOnceV('unique_payment_processor')]->
    [!Processor($P)]

rule create_merchant:
    let
        merchant_type = 'legit_merchant'
    in
    [Fr(~public_api_key), Fr(~private_api_key), !Processor(P)]
    --[Neq($M, P), OnlyOnceV(merchant_type), Create_merchant(~public_api_key)]->
    [!Merchant($M, ~public_api_key, ~private_api_key, merchant_type)]

rule create_adversary_merchant:
    let
        merchant_type = 'adversary_merchant'
    in
    [Fr(~public_api_key), Fr(~private_api_key), !Merchant(M, m_public_api_key, m_private_api_key, 'legit_merchant'), !Processor(P)]
    --[Neq($AM, P), Neq($AM, M), OnlyOnceV(merchant_type), Create_adversary_merchant(~public_api_key)]->
    [!Merchant($AM, ~public_api_key, ~private_api_key, merchant_type), Out(~public_api_key)]


rule create_client:
    [Fr(~card_number), !Merchant(M, public_api_key, private_api_key, 'legit_merchant'), !Merchant(AM, am_public_api_key, am_private_api_key, 'adversary_merchant'), !Processor(P)]
    --[Neq($C, P), Neq($C, M), Neq($C, AM), OnlyOnceV('legit_client'), Create_client(~card_number)]->
    [!Client($C, ~card_number, public_api_key)]

rule client_sends_card_details:
    [!Client(C, card_number, public_api_key), !Processor(P)]
    --[Client_sends_card_details(card_number)]->
    [CP_SendMsg(C, P, <'client_card_details', card_number, public_api_key>)]

rule payment_processor_returns_token:
    [CP_RecvMsg(C, P, <'client_card_details', recv_card_number, recv_public_api_key>), !Merchant(M, recv_public_api_key, private_api_key, merchant_type), Fr(~token)]
    -->
    [CP_SendMsg(P, C, <'token', ~token>), TokenExists(~token, recv_public_api_key, recv_card_number)]

rule client_starts_transaction:
    [CP_RecvMsg(P, C, <'token', recv_token>), !Merchant(M, public_api_key, private_api_key, 'legit_merchant')]
    --[Client_starts_transaction()]->
    [CM_SendMsg(C, M, <'client_token', recv_token>)]

rule merchant_creates_transaction:
    [CM_RecvMsg(C, M, <'client_token', recv_token>), !Merchant(M, public_api_key, private_api_key, merchant_type), Fr(~amount), Fr(~merchant_ref), !Processor(P)]
    --[Merchant_creates_transaction(public_api_key, ~amount)]->
    [MP_SendMsg(M, P, <'merchant_transaction_data', recv_token, ~amount, private_api_key, ~merchant_ref>), Memory(M, <'client_token', recv_token>)]

rule payment_processor_performs_transaction:
    let
        payment_processor_confirmation = 'payment_processor_confirmation'    
    in
    [MP_RecvMsg(M, P, <'merchant_transaction_data', recv_token, recv_amount, recv_private_api_key, recv_merchant_ref>), !Merchant(M, public_api_key, recv_private_api_key, merchant_type), TokenExists(recv_token, public_api_key, card_number), !Client(C, card_number, legit_public_api_key)]
    --[Processor_handles_transaction(card_number, recv_amount, public_api_key)]->
    [!Transaction_approved(), MP_SendMsg(P, M, <'payment_processor_confirmation', payment_processor_confirmation>)]

rule merchant_receives_confirmation:
    let
        merchant_confirmation = 'merchant_confirmation'
    in
    [MP_RecvMsg(P, M, <'payment_processor_confirmation', recv_payment_processor_confirmation>), !Client(C, card_number, public_api_key)]
    -->
    [CM_SendMsg(M, C, <'merchant_confirmation', merchant_confirmation>), !Merchant_received_confirmation()]

rule client_receives_confirmation:
    [CM_RecvMsg(M, C, <'merchant_confirmation', merchant_confirmation>)]
    -->
    [!Client_received_confirmation()]



// Instrumentation

rule check_merchant_received_confirmation:
    [!Merchant_received_confirmation()]
    --[Check_merchant_received_confirmation()]->
    []

rule check_client_received_confirmation:
    [!Client_received_confirmation()]
    --[Check_client_received_confirmation()]->
    []

rule check_transaction_status:
    [!Transaction_approved()]
    --[Check_transaction_approved()]->
    []

rule check_client_knows_amount:
    [!Client_knows_amount(amount)]
    --[Check_client_knows_amount(amount)]->
    []

  
